{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QGIS GeoNode QGIS plugin \u00b6 A QGIS plugin for working with GeoNode resources Documentation: https://kartoza.github.io/qgis_geonode Source code: https://github.com/kartoza/qgis_geonode This is a QGIS plugin to allow working with and managing GeoNode resources in QGIS. Installation \u00b6 Development for this plugin is still in early stages. Therefore it is not available in the main QGIS plugin repository. However, you may still install it comfortably from inside your QGIS installation, by configuring our custom repository.It is available at: https://kartoza.github.io/qgis_geonode/repo/plugins.xml Add this custom repository inside QGIS Plugin Manager Refresh the list of available plugins Search for a plugin named QGIS GeoNode Install it! Note Be sure to have the Show also experimental plugins checkbox checked, the QGIS Plugin Manager Settings section. Check the Development section for a more developer oriented installation procedure License \u00b6 This plugin is distributed under the terms of the GNU General Public License version 3","title":"Home"},{"location":"#qgis-geonode-qgis-plugin","text":"A QGIS plugin for working with GeoNode resources Documentation: https://kartoza.github.io/qgis_geonode Source code: https://github.com/kartoza/qgis_geonode This is a QGIS plugin to allow working with and managing GeoNode resources in QGIS.","title":"QGIS GeoNode QGIS plugin"},{"location":"#installation","text":"Development for this plugin is still in early stages. Therefore it is not available in the main QGIS plugin repository. However, you may still install it comfortably from inside your QGIS installation, by configuring our custom repository.It is available at: https://kartoza.github.io/qgis_geonode/repo/plugins.xml Add this custom repository inside QGIS Plugin Manager Refresh the list of available plugins Search for a plugin named QGIS GeoNode Install it! Note Be sure to have the Show also experimental plugins checkbox checked, the QGIS Plugin Manager Settings section. Check the Development section for a more developer oriented installation procedure","title":"Installation"},{"location":"#license","text":"This plugin is distributed under the terms of the GNU General Public License version 3","title":"License"},{"location":"about/","text":"About \u00b6 This plugin is being created as an activity of the PRN project, led by SPC . Its goal is to develop a QGIS-based client for GeoNode that allows GIS users to more easily integrate GeoNode into their workflows. Original design and implementation is being done as a joint effort between the Kartoza and GeoSolutions teams, with input from the broader community. The plugin will eventually be made available to the general QGIS audience by being released onto the official plugins repository. It is also expected that it will supersede the current QGIS GeoNode integration.","title":"About"},{"location":"about/#about","text":"This plugin is being created as an activity of the PRN project, led by SPC . Its goal is to develop a QGIS-based client for GeoNode that allows GIS users to more easily integrate GeoNode into their workflows. Original design and implementation is being done as a joint effort between the Kartoza and GeoSolutions teams, with input from the broader community. The plugin will eventually be made available to the general QGIS audience by being released onto the official plugins repository. It is also expected that it will supersede the current QGIS GeoNode integration.","title":"About"},{"location":"changelog-base/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 0.3.1 - 2021-05-07 \u00b6 Added \u00b6 Persist current search filters between restarts of QGIS Add icon to button that fetches keywords Improve user feedback when testing connections Fixed \u00b6 Improved layer loading with the CSW API Fix incorrect pagination results with the CSW API 0.3.0 - 2021-04-07 \u00b6 Added \u00b6 Allow filtering searches by temporal extent and publication date Add ordering of search results Add Changelog to the online documentation Further improve the look of search results Changed \u00b6 All HTTP requests are now done in a background thread to avoid blocking QGIS UI Load layers in a background thread in order to avoid blocking QGIS UI Improve feedback shown when searching and loading layers Move Title search filter out of the collapsible group, so that it is easier to access Fixed \u00b6 Improved error handling Fix incorrect visibility of the Search/Next/Previous search buttons Reset pagination when pressing Search button Remove unused Add/Close buttons on datasource manager dialogue 0.2.0 - 2021-02-28 \u00b6 Added \u00b6 Add initial support for earlier GeoNode versions Initial support for search filters Add support for applying a vector layer's default SLD style when loading Changed \u00b6 Improve look of search results Fixed \u00b6 Fix invalid update date for versions released via custom plugin repo 0.1.1 - 2021-02-02 \u00b6 Fixed \u00b6 Invalid tag format in previous version prevented automated distribution to our custom QGIS repo 0.1.0 - 2021-02-02 [YANKED] \u00b6 Added \u00b6 Load GeoNode layers into QGIS Load a GeoNode metadata into the corresponding QGIS layer Manage GeoNode connections through the plugin GUI Improve plugin metadata and documentation Fixed \u00b6 Current connection settings are now always up-to-date with the GUI 0.0.9 - 2021-01-11 \u00b6 Fixed \u00b6 Invalid plugin zip name 0.0.8 - 2021-01-08 \u00b6 Fixed \u00b6 Remove pycache files from plugin zip 0.0.7 - 2021-01-08 \u00b6 Fixed \u00b6 Invalid CI settings 0.0.6 - 2021-01-08 \u00b6 Fixed \u00b6 Invalid CI settings 0.0.5 - 2021-01-08 \u00b6 Added \u00b6 Initial project structure Add infrastructure for automated testing Add infrastructure for managing releases Add geonode API client","title":"Changelog"},{"location":"changelog-base/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog-base/#unreleased","text":"","title":"Unreleased"},{"location":"changelog-base/#031-2021-05-07","text":"","title":"0.3.1 - 2021-05-07"},{"location":"changelog-base/#added","text":"Persist current search filters between restarts of QGIS Add icon to button that fetches keywords Improve user feedback when testing connections","title":"Added"},{"location":"changelog-base/#fixed","text":"Improved layer loading with the CSW API Fix incorrect pagination results with the CSW API","title":"Fixed"},{"location":"changelog-base/#030-2021-04-07","text":"","title":"0.3.0 - 2021-04-07"},{"location":"changelog-base/#added_1","text":"Allow filtering searches by temporal extent and publication date Add ordering of search results Add Changelog to the online documentation Further improve the look of search results","title":"Added"},{"location":"changelog-base/#changed","text":"All HTTP requests are now done in a background thread to avoid blocking QGIS UI Load layers in a background thread in order to avoid blocking QGIS UI Improve feedback shown when searching and loading layers Move Title search filter out of the collapsible group, so that it is easier to access","title":"Changed"},{"location":"changelog-base/#fixed_1","text":"Improved error handling Fix incorrect visibility of the Search/Next/Previous search buttons Reset pagination when pressing Search button Remove unused Add/Close buttons on datasource manager dialogue","title":"Fixed"},{"location":"changelog-base/#020-2021-02-28","text":"","title":"0.2.0 - 2021-02-28"},{"location":"changelog-base/#added_2","text":"Add initial support for earlier GeoNode versions Initial support for search filters Add support for applying a vector layer's default SLD style when loading","title":"Added"},{"location":"changelog-base/#changed_1","text":"Improve look of search results","title":"Changed"},{"location":"changelog-base/#fixed_2","text":"Fix invalid update date for versions released via custom plugin repo","title":"Fixed"},{"location":"changelog-base/#011-2021-02-02","text":"","title":"0.1.1 - 2021-02-02"},{"location":"changelog-base/#fixed_3","text":"Invalid tag format in previous version prevented automated distribution to our custom QGIS repo","title":"Fixed"},{"location":"changelog-base/#010-2021-02-02-yanked","text":"","title":"0.1.0 - 2021-02-02 [YANKED]"},{"location":"changelog-base/#added_3","text":"Load GeoNode layers into QGIS Load a GeoNode metadata into the corresponding QGIS layer Manage GeoNode connections through the plugin GUI Improve plugin metadata and documentation","title":"Added"},{"location":"changelog-base/#fixed_4","text":"Current connection settings are now always up-to-date with the GUI","title":"Fixed"},{"location":"changelog-base/#009-2021-01-11","text":"","title":"0.0.9 - 2021-01-11"},{"location":"changelog-base/#fixed_5","text":"Invalid plugin zip name","title":"Fixed"},{"location":"changelog-base/#008-2021-01-08","text":"","title":"0.0.8 - 2021-01-08"},{"location":"changelog-base/#fixed_6","text":"Remove pycache files from plugin zip","title":"Fixed"},{"location":"changelog-base/#007-2021-01-08","text":"","title":"0.0.7 - 2021-01-08"},{"location":"changelog-base/#fixed_7","text":"Invalid CI settings","title":"Fixed"},{"location":"changelog-base/#006-2021-01-08","text":"","title":"0.0.6 - 2021-01-08"},{"location":"changelog-base/#fixed_8","text":"Invalid CI settings","title":"Fixed"},{"location":"changelog-base/#005-2021-01-08","text":"","title":"0.0.5 - 2021-01-08"},{"location":"changelog-base/#added_4","text":"Initial project structure Add infrastructure for automated testing Add infrastructure for managing releases Add geonode API client","title":"Added"},{"location":"development/","text":"Development \u00b6 This plugin uses poetry , typer and black . The general instructions for development are: Fork the code repository Clone your fork locally Install poetry Install the plugin dependencies into a new virtual env with cd qgis_geonode poetry install Work on a feature/bug on a new branch When ready, submit a PR for your code to be reviewed and merged pluginadmin \u00b6 This plugin comes with a pluginadmin.py python module which provides a CLI with commands useful for development. It is used to perform all operations related to the plugin: Install the plugin to your local QGIS user profile Ensure your virtual env has access to the QGIS Python bindings Build a zip of the plugin etc. It is run inside the virtual environment created by poetry. As such it must be invoked like this: # get an overview of existing commands poetry run python pluginadmin.py --help Install plugin into your local QGIS python plugins directory \u00b6 When developing, in order to try out the plugin locally you need to call poetry run python pluginadmin.py install command. This command will copy all files into your local QGIS python plugins directory. Upon making changes to the code you will need to call this installation command again and potentially also restart QGIS. Note Restarting QGIS is necessary because this plugin adds an additional data source provider to QGIS and there is currently no way to reload the available providers without restarting QGIS. poetry run python pluginadmin.py install Running tests \u00b6 Tests are made with pytest and pytest-qt . In order to be able to run the tests, the Python virtual environment needs to have the QGIS Python bindings available. This can be achieved by running: Note If your QGIS is in a non-standard location, you can set these env variables before running the command: - `PYQT5_DIR_PATH` - location of PyQt5. Defaults to `/usr/lib/python3/dist-packages/PyQt5` - `SIP_DIR_PATH` - Location of the SIP package. Defaults to `/usr/lib/python3/dist-packages` - `QGIS_PYTHON_DIR_PATH` - Location of the QGIS Python bindings. Defaults to `/usr/lib/python3/dist-packages/qgis` poetry run python pluginadmin.py install-qgis-into-venv Installing QGIS Python bindings into the Python virtual environment only needs to be done once. Finally, run tests with: poetry run pytest Contributing \u00b6 We welcome contributions from everybody but ask that the following process be adhered to: Find (or open) the issue that describes the problem that you want to help solving. Make a mention in the issue that you are working on a solution Fork this repo and work on a solution to the problem. Remember to add passing automated tests to attest that the problem has been fixed Run your code through the black formatter before submitting your PR. Otherwise the CI pipeline may fail, and we will request that you fix it before merging. This is how we run black in our CI pipeline: poetry run black src/qgis_geonode Releasing new versions \u00b6 This plugin uses an automated release process that is based upon github actions . New versions shall be released under the semantic versioning contract. In order to have a new version of the plugin release: Be sure to have updated the CHANGELOG.md Be sure to have updated the version on the pyproject.toml file. You can either manually modify the tool.poetry.version key, or you can run the poetry version {version specifier} command Create a new git annotated tag and push it to the repository. The tag name must follow the v{major}.{minor}.{patch} convention, for example: git tag -a -m 'version 0.3.2' v0.3.2 git push origin v0.3.2 Github actions will take it from there. The new release shall appear in the custom QGIS plugin repo shortly","title":"Development"},{"location":"development/#development","text":"This plugin uses poetry , typer and black . The general instructions for development are: Fork the code repository Clone your fork locally Install poetry Install the plugin dependencies into a new virtual env with cd qgis_geonode poetry install Work on a feature/bug on a new branch When ready, submit a PR for your code to be reviewed and merged","title":"Development"},{"location":"development/#pluginadmin","text":"This plugin comes with a pluginadmin.py python module which provides a CLI with commands useful for development. It is used to perform all operations related to the plugin: Install the plugin to your local QGIS user profile Ensure your virtual env has access to the QGIS Python bindings Build a zip of the plugin etc. It is run inside the virtual environment created by poetry. As such it must be invoked like this: # get an overview of existing commands poetry run python pluginadmin.py --help","title":"pluginadmin"},{"location":"development/#install-plugin-into-your-local-qgis-python-plugins-directory","text":"When developing, in order to try out the plugin locally you need to call poetry run python pluginadmin.py install command. This command will copy all files into your local QGIS python plugins directory. Upon making changes to the code you will need to call this installation command again and potentially also restart QGIS. Note Restarting QGIS is necessary because this plugin adds an additional data source provider to QGIS and there is currently no way to reload the available providers without restarting QGIS. poetry run python pluginadmin.py install","title":"Install plugin into your local QGIS python plugins directory"},{"location":"development/#running-tests","text":"Tests are made with pytest and pytest-qt . In order to be able to run the tests, the Python virtual environment needs to have the QGIS Python bindings available. This can be achieved by running: Note If your QGIS is in a non-standard location, you can set these env variables before running the command: - `PYQT5_DIR_PATH` - location of PyQt5. Defaults to `/usr/lib/python3/dist-packages/PyQt5` - `SIP_DIR_PATH` - Location of the SIP package. Defaults to `/usr/lib/python3/dist-packages` - `QGIS_PYTHON_DIR_PATH` - Location of the QGIS Python bindings. Defaults to `/usr/lib/python3/dist-packages/qgis` poetry run python pluginadmin.py install-qgis-into-venv Installing QGIS Python bindings into the Python virtual environment only needs to be done once. Finally, run tests with: poetry run pytest","title":"Running tests"},{"location":"development/#contributing","text":"We welcome contributions from everybody but ask that the following process be adhered to: Find (or open) the issue that describes the problem that you want to help solving. Make a mention in the issue that you are working on a solution Fork this repo and work on a solution to the problem. Remember to add passing automated tests to attest that the problem has been fixed Run your code through the black formatter before submitting your PR. Otherwise the CI pipeline may fail, and we will request that you fix it before merging. This is how we run black in our CI pipeline: poetry run black src/qgis_geonode","title":"Contributing"},{"location":"development/#releasing-new-versions","text":"This plugin uses an automated release process that is based upon github actions . New versions shall be released under the semantic versioning contract. In order to have a new version of the plugin release: Be sure to have updated the CHANGELOG.md Be sure to have updated the version on the pyproject.toml file. You can either manually modify the tool.poetry.version key, or you can run the poetry version {version specifier} command Create a new git annotated tag and push it to the repository. The tag name must follow the v{major}.{minor}.{patch} convention, for example: git tag -a -m 'version 0.3.2' v0.3.2 git push origin v0.3.2 Github actions will take it from there. The new release shall appear in the custom QGIS plugin repo shortly","title":"Releasing new versions"},{"location":"user-guide/","text":"User guide \u00b6 This guide is going to show you how to use the QGIS GeoNode plugin to access GeoNode instances resources inside QGIS. Add a GeoNode instance \u00b6 To add a GeoNode instance follow the below steps. Open the QGIS Data Source Manager (Ctrl+L), go to GeoNode Plugin Provider section Add a new GeoNode instance connection, click a button with a label \"New\" which is inside the \"Connections\" group box, a dialog for filling in connection details will be shown. Enter the GeoNode instance details \"Name\" and \"URL\", the \"URL\" is for the GeoNode URL, if the instance supports authentication, you can add the authentication configurations for the instance using the QGIS authentication configuration selector widget available on the connection dialog. To add new authentication configuration, click a button with symbol which is beside the authentication configurations list combo box, the following dialog will be shown. Basic authentication will be selected by default the first time the dialog is opened. For API V2 we recommend to use OAuth2 authentication with the Authorization code grant type, for the CSW API, OAuth2 with authorization code flow is recommend to be used with additional username and password provided on the connection configuration dialog UI. The below image shows usage of a OAuth2 configuration with a Authorization code grant type and sample Token URL , Client ID , Client Secret , all these details are supplied by OAuth2 server credentials(for this case GeoNode). GeoNode API V2 \u00b6 GeoNode API V2 is the latest API added in GeoNode, available from GeoNode version 3.2 and later versions, the API conforms to the OpenAPI specification which is a descriptive format for REST APIs. When creating connections that are using this API, select V2 from the API version list. The API V2 support authentication via OAuth2 with no additional configurations, to add or use OAuth2 authentication, follow instructions described on the previous section. GeoNode API CSW \u00b6 The CSW API exposes GeoNode resources via a CSW( Catalogue Service-Web) which is a web specification for accessing geo-spatial data using XML . All GeoNode instances support this API. This API doesn't fully support OAuth2 authentication, when connecting to GeoNode instance that uses CSW API, OAuth2 configuration and additional username and password are required in order to configure authentication for the corresponding GeoNode instance. Through the \"API version\" list choose the API that the connection should be connected to with. They are two options at the moment, CSW API and the API version 2 the latter is available from GeoNode instances that use the master version. Click the \"auto detect\" button, to automatically detect and select the API version for the GeoNode instance. Search results page size can be set inside the Page size field. By default, the Page size is set to 10. Click the \"Test Connection\" button to verify if the connection works. Click \"Ok\" button after finishing adding all the details, to add the connection. The picture below shows how you can configure anonymous access to the main GeoNode demo server Search and load GeoNode layer into QGIS \u00b6 Searching layers \u00b6 Select the intended connection from the connections list, then click the \"Search Geonode\" button, after searching is complete a list of search results will be populated in a scroll area below the search buttons. Buttons \"Previous\" and \"Next\" can be used to navigate search results when the results have been paginated. Below image shows search results after search on the GeoNode demo server Using the search filters \u00b6 The following search filters are supported Title The resource title is used to filter search results and returning records that contains the supplied title. Abstract Same as a title filter, records that contains the provided abstract value will be returned. Keywords Search will filter all resources that have keywords that exactly matches the selected keyword. Topic Categories Filters the resources that their categories exactly matches the selected category. Resources types Filters resources based on the selected resource types, the resource types selection is mutually inclusive, if more than one type is selected, the search results will include all resources that have been the selected. Temporal extent This filter used to select resources based on the stored temporal extent. Two fields start and end are used to represent the beginning and end of the extent respectively, during filtering both fields values are excluded. When both fields are supplied, resources containing temporal extent that is greater than start and less than end will be returned. If only start is provided, resources with the temporal extent beginning that is greater than start will be returned, if only end is provided resource with temporal extent end that is less than end will be returned. Publication date This filter has similar conditions as the Temporal extent filter, the difference here is the filter is applied to the resource's publication date and not the resources temporal extent. Spatial Extent The spatial extent filter is used to filter resources based on their geospatial extent, the extent can be filled by using a QGIS layer extent, map canvas extent or values can be manually added. Currently, each of the API version supports only certain filters, for API version 2 all search filters are supported except the Spatial Extent filter, while the CSW API supports only Title and Abstract filters. Ordering results \u00b6 When searching for resources the results are ordered using their name by default, currently it is the only field that is allowed for ordering results. The \"Reverse order\" checkbox which is beside \"Sort by\" combo box, is used to change the order of the results, when unchecked the results return in ascending order and otherwise when it is checked. Layer's page on the GeoNode instance \u00b6 All search results item contain an \"Open in Browser\" button, which when clicked opens the layer GeoNode page using the default browser. Loading a layer onto QGIS \u00b6 After searching layers is complete, the search results items provide options for loading layers for the corresponding resources inside QGIS. Each search item has buttons that load layers via QGIS OGC providers e.g. WMS for loading maps, WFS for loading vector layers and WCS for loading raster layers. Each of these buttons will have an icon that represents the respective OGC service and a tooltip that explains about the button action. The WFS button is used load the vector layers, WCS button for raster layers and WMS button is always available for all resources that support it, if there is a problem with the resource URI the OGC buttons will not be available. Inspecting layer metadata \u00b6 When loading the layer inside QGIS, the layer metadata from GeoNode are added into the loaded layer as QGIS layer metadata. To view the added metadata, right-click on the added layer and click Properties... then from the Properties dialog select the Metadata page. Image showing metadata page that contains metadata for layer with title 'ARANDANO BRIGITTA 2030' from the GeoNode demo server Synchronize a loaded layer with GeoNode \u00b6 Not implemented yet Modify layer data \u00b6 Not implemented yet Modify layer symbology \u00b6 Not implemented yet Modify layer metadata \u00b6 Not implemented yet Modify layer access permissions \u00b6 Not implemented yet Upload new layer to GeoNode \u00b6 Not implemented yet Delete layer from GeoNode \u00b6 Not implemented yet","title":"User guide"},{"location":"user-guide/#user-guide","text":"This guide is going to show you how to use the QGIS GeoNode plugin to access GeoNode instances resources inside QGIS.","title":"User guide"},{"location":"user-guide/#add-a-geonode-instance","text":"To add a GeoNode instance follow the below steps. Open the QGIS Data Source Manager (Ctrl+L), go to GeoNode Plugin Provider section Add a new GeoNode instance connection, click a button with a label \"New\" which is inside the \"Connections\" group box, a dialog for filling in connection details will be shown. Enter the GeoNode instance details \"Name\" and \"URL\", the \"URL\" is for the GeoNode URL, if the instance supports authentication, you can add the authentication configurations for the instance using the QGIS authentication configuration selector widget available on the connection dialog. To add new authentication configuration, click a button with symbol which is beside the authentication configurations list combo box, the following dialog will be shown. Basic authentication will be selected by default the first time the dialog is opened. For API V2 we recommend to use OAuth2 authentication with the Authorization code grant type, for the CSW API, OAuth2 with authorization code flow is recommend to be used with additional username and password provided on the connection configuration dialog UI. The below image shows usage of a OAuth2 configuration with a Authorization code grant type and sample Token URL , Client ID , Client Secret , all these details are supplied by OAuth2 server credentials(for this case GeoNode).","title":"Add a GeoNode instance"},{"location":"user-guide/#geonode-api-v2","text":"GeoNode API V2 is the latest API added in GeoNode, available from GeoNode version 3.2 and later versions, the API conforms to the OpenAPI specification which is a descriptive format for REST APIs. When creating connections that are using this API, select V2 from the API version list. The API V2 support authentication via OAuth2 with no additional configurations, to add or use OAuth2 authentication, follow instructions described on the previous section.","title":"GeoNode API V2"},{"location":"user-guide/#geonode-api-csw","text":"The CSW API exposes GeoNode resources via a CSW( Catalogue Service-Web) which is a web specification for accessing geo-spatial data using XML . All GeoNode instances support this API. This API doesn't fully support OAuth2 authentication, when connecting to GeoNode instance that uses CSW API, OAuth2 configuration and additional username and password are required in order to configure authentication for the corresponding GeoNode instance. Through the \"API version\" list choose the API that the connection should be connected to with. They are two options at the moment, CSW API and the API version 2 the latter is available from GeoNode instances that use the master version. Click the \"auto detect\" button, to automatically detect and select the API version for the GeoNode instance. Search results page size can be set inside the Page size field. By default, the Page size is set to 10. Click the \"Test Connection\" button to verify if the connection works. Click \"Ok\" button after finishing adding all the details, to add the connection. The picture below shows how you can configure anonymous access to the main GeoNode demo server","title":"GeoNode API CSW"},{"location":"user-guide/#search-and-load-geonode-layer-into-qgis","text":"","title":"Search and load GeoNode layer into QGIS"},{"location":"user-guide/#searching-layers","text":"Select the intended connection from the connections list, then click the \"Search Geonode\" button, after searching is complete a list of search results will be populated in a scroll area below the search buttons. Buttons \"Previous\" and \"Next\" can be used to navigate search results when the results have been paginated. Below image shows search results after search on the GeoNode demo server","title":"Searching layers"},{"location":"user-guide/#using-the-search-filters","text":"The following search filters are supported Title The resource title is used to filter search results and returning records that contains the supplied title. Abstract Same as a title filter, records that contains the provided abstract value will be returned. Keywords Search will filter all resources that have keywords that exactly matches the selected keyword. Topic Categories Filters the resources that their categories exactly matches the selected category. Resources types Filters resources based on the selected resource types, the resource types selection is mutually inclusive, if more than one type is selected, the search results will include all resources that have been the selected. Temporal extent This filter used to select resources based on the stored temporal extent. Two fields start and end are used to represent the beginning and end of the extent respectively, during filtering both fields values are excluded. When both fields are supplied, resources containing temporal extent that is greater than start and less than end will be returned. If only start is provided, resources with the temporal extent beginning that is greater than start will be returned, if only end is provided resource with temporal extent end that is less than end will be returned. Publication date This filter has similar conditions as the Temporal extent filter, the difference here is the filter is applied to the resource's publication date and not the resources temporal extent. Spatial Extent The spatial extent filter is used to filter resources based on their geospatial extent, the extent can be filled by using a QGIS layer extent, map canvas extent or values can be manually added. Currently, each of the API version supports only certain filters, for API version 2 all search filters are supported except the Spatial Extent filter, while the CSW API supports only Title and Abstract filters.","title":"Using the search filters"},{"location":"user-guide/#ordering-results","text":"When searching for resources the results are ordered using their name by default, currently it is the only field that is allowed for ordering results. The \"Reverse order\" checkbox which is beside \"Sort by\" combo box, is used to change the order of the results, when unchecked the results return in ascending order and otherwise when it is checked.","title":"Ordering results"},{"location":"user-guide/#layers-page-on-the-geonode-instance","text":"All search results item contain an \"Open in Browser\" button, which when clicked opens the layer GeoNode page using the default browser.","title":"Layer's page on the GeoNode instance"},{"location":"user-guide/#loading-a-layer-onto-qgis","text":"After searching layers is complete, the search results items provide options for loading layers for the corresponding resources inside QGIS. Each search item has buttons that load layers via QGIS OGC providers e.g. WMS for loading maps, WFS for loading vector layers and WCS for loading raster layers. Each of these buttons will have an icon that represents the respective OGC service and a tooltip that explains about the button action. The WFS button is used load the vector layers, WCS button for raster layers and WMS button is always available for all resources that support it, if there is a problem with the resource URI the OGC buttons will not be available.","title":"Loading a layer onto QGIS"},{"location":"user-guide/#inspecting-layer-metadata","text":"When loading the layer inside QGIS, the layer metadata from GeoNode are added into the loaded layer as QGIS layer metadata. To view the added metadata, right-click on the added layer and click Properties... then from the Properties dialog select the Metadata page. Image showing metadata page that contains metadata for layer with title 'ARANDANO BRIGITTA 2030' from the GeoNode demo server","title":"Inspecting layer metadata"},{"location":"user-guide/#synchronize-a-loaded-layer-with-geonode","text":"Not implemented yet","title":"Synchronize a loaded layer with GeoNode"},{"location":"user-guide/#modify-layer-data","text":"Not implemented yet","title":"Modify layer data"},{"location":"user-guide/#modify-layer-symbology","text":"Not implemented yet","title":"Modify layer symbology"},{"location":"user-guide/#modify-layer-metadata","text":"Not implemented yet","title":"Modify layer metadata"},{"location":"user-guide/#modify-layer-access-permissions","text":"Not implemented yet","title":"Modify layer access permissions"},{"location":"user-guide/#upload-new-layer-to-geonode","text":"Not implemented yet","title":"Upload new layer to GeoNode"},{"location":"user-guide/#delete-layer-from-geonode","text":"Not implemented yet","title":"Delete layer from GeoNode"}]}